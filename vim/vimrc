"""""""""""""""""""""""""""""""""""""""""""""""""
" lstwn's VIM Configuration                     "
"""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""
" Plugins                             "
"""""""""""""""""""""""""""""""""""""""

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" syntactic lang support
Plug 'rust-lang/rust.vim'
" Plug 'cespare/vim-toml'
Plug 'stephpy/vim-yaml'
Plug 'mechatroner/rainbow_csv'
" Plug 'dag/vim-fish'
" Plug 'HerringtonDarkholme/yats.vim' " ts syntax highlighting
" Plug 'posva/vim-vue'
" Plug 'jparise/vim-graphql'
Plug 'pantharshit00/vim-prisma'
Plug 'sheerun/vim-polyglot'
" semantic lang support
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'honza/vim-snippets'
" fuzzy finder
Plug 'vn-ki/coc-clap'
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' }
" vim sane defaults
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-surround'
" file manager
Plug 'https://gitlab.com/lstwn/broot.vim'
" ux improvements
Plug 'tmux-plugins/vim-tmux-focus-events'
Plug 'lstwn/terminal.vim'
Plug 'https://gitlab.com/lstwn/lightstl.vim'
Plug 'dhruvasagar/vim-table-mode'

call plug#end()

"""""""""""""""""""""""""""""""""""""""
" Options                             "
"""""""""""""""""""""""""""""""""""""""

let s:os = system("uname")
let s:is_mac = s:os == "Darwin\n" ? 1 : 0
let s:is_linux = s:os == "Linux\n" ? 1 : 0

if s:is_mac
    set clipboard=unnamed
endif
if s:is_linux
    set clipboard=unnamedplus
endif
set hidden " swap changed buffers without !
set confirm " displays an option on what to do instead of a plain error
set ignorecase " case-insensitive search by default
set smartcase " case-sensitive search if search term contains a capital letter
set nowrapscan
set incsearch
set hlsearch
set shortmess-=S " show amount of search results
set foldmethod=manual
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab " Use spaces instead of tabs
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:␣
set backspace=indent,eol,start " backspace over everything
set splitright
set splitbelow
set winwidth=4
set winminwidth=4
set winheight=3
set winminheight=3
set scrolloff=10
set autoread " automatically load file changes, undo with 'u'
set title
set colorcolumn=80
set t_Co=16
set wildmenu
set wildchar=<c-@>
set wildmode=full
set wildignorecase
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.png,*.ico
set wildignore+=*.pdf,*.psd
set wildignore+=*.class
set wildignore+=node_modules/*
set cmdheight=2
set showtabline=2
set laststatus=2 " always display a statusline regardless of the amount of windows open
set noshowmode
set ruler
set cursorline
set signcolumn=yes
set sessionoptions-=options " do not store vimrc stuff in session files
set sessionoptions-=terminal " do not store terminal stuff in session files (because does not restore ++kill=term currently)
set switchbuf=usetab,newtab
augroup optiontweaks
    autocmd!
    autocmd TerminalOpen * setlocal nonumber norelativenumber signcolumn=no colorcolumn=0
augroup END
syntax on
filetype plugin on
filetype plugin indent on

function s:append_terminal_colorscheme()
    highlight link CocListMode StatusLineMode
    highlight link CocListPath StatusLineFile
    highlight! link ClapInput TabLineSel
    highlight! link ClapSpinner ClapInput
    highlight! link ClapSearchText ClapInput
    highlight! link ClapIndicator ClapInput
    highlight! ClapDisplay ctermbg=NONE
    highlight! ClapPreview ctermbg=Black
    highlight! link ClapCurrentSelection PMenuSel
    highlight! link ClapCurrentSelectionSign ClapCurrentSelection
    highlight! link ClapSelected PMenu
    highlight! link ClapSelectedSign ClapSelected
    highlight! ClapMatches ctermfg=Yellow
    highlight! link ClapFuzzyMatches1 ClapMatches
    highlight! link ClapFuzzyMatches2 ClapMatches
    highlight! link ClapFuzzyMatches3 ClapMatches
    highlight! link ClapFuzzyMatches4 ClapMatches
    highlight! link ClapFuzzyMatches5 ClapMatches
    highlight! link ClapFuzzyMatches6 ClapMatches
    highlight! link ClapFuzzyMatches7 ClapMatches
    highlight! link ClapFuzzyMatches8 ClapMatches
    highlight! link ClapFuzzyMatches9 ClapMatches
    highlight! link ClapNClapNoMatchesFound ErrorMsg
endfunction
augroup colortweaks
    autocmd!
    autocmd ColorScheme terminal call s:append_terminal_colorscheme()
augroup END
colorscheme terminal

function! SynStack()
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

"""""""""""""""""""""""""""""""""""""""
" Mappings                            "
"""""""""""""""""""""""""""""""""""""""

let mapleader=","
call maphelper#apply('<leader>h', ':call SynStack()<CR>', 'n', 1)
call maphelper#apply('<silent> <F2>', maphelper#toggle_command('paste'), 'nit', 1)
call maphelper#apply('<silent> <F3>', maphelper#toggle_command('list'), 'nit', 1)
call maphelper#apply('<silent> <F8>', maphelper#toggle_command('winfixheight'), 'nit', 1)
call maphelper#apply('<silent> <F9>', maphelper#toggle_command('winfixwidth'), 'nit', 1)
call maphelper#apply('<C-W>c', ':tabnew %<CR>', 'nt', 1)
call maphelper#apply('<C-W>n', ':tabnext<CR>', 'nt', 1)
call maphelper#apply('<C-W>p', ':tabprevious<CR>', 'nt', 1)
call maphelper#apply('<C-W>m', '<C-W>_ <C-W>\|', 'nt', 1)
" <C-W> instead of <leader> not possible due to resize issues
call maphelper#apply('<leader>1', ':tabfirst<CR>', 'nt', 1)
call maphelper#apply('<leader>2', '2gt', 'nt', 1)
call maphelper#apply('<leader>3', '3gt', 'nt', 1)
call maphelper#apply('<leader>4', '4gt', 'nt', 1)
call maphelper#apply('<leader>5', '5gt', 'nt', 1)
call maphelper#apply('<leader>6', '6gt', 'nt', 1)
call maphelper#apply('<leader>7', '7gt', 'nt', 1)
call maphelper#apply('<leader>8', '8gt', 'nt', 1)
call maphelper#apply('<leader>9', '9gt', 'nt', 1)
call maphelper#apply('<leader>0', ':tablast<CR>', 'nt', 1)
call maphelper#apply('<leader>X', ':call popup_clear()<CR>', 'n', 1)
call maphelper#apply('<leader>R', ':source $MYVIMRC<CR>:filetype detect<CR>:echo "Reloaded"<CR>', 'n', 1)
call maphelper#apply('<leader>b', ':Clap buffers<CR>', 'nt', 1)
call maphelper#apply('<leader>f', ':Clap files<CR>', 'nt', 1)
call maphelper#apply('<leader>e', ':Explore<CR>', 'nt', 1)
call maphelper#apply('~', ':Explore ~<CR>', 'n', 1)
call maphelper#apply('-', ':Explore %:p:h<CR>', 'n', 1)
call maphelper#apply('<leader>rg', ':Clap grep2<CR>', 'n', 1)
call maphelper#apply('<leader>c', ':terminal<CR>', 'n', 1)
call maphelper#apply('<leader>g', ':terminal git wdiff<CR>', 'n', 1)
call maphelper#apply('<leader>d', ':Clap coc_diagnostics<CR>', 'n', 1)
call maphelper#apply('<leader>o', ':Clap coc_outline<CR>', 'n', 1)
call maphelper#apply('<leader>s', ':Clap coc_symbols<CR>', 'n', 1)
call maphelper#apply('<leader><tab>', ':b#<CR>', 'nt', 1)

"""""""""""""""""""""""""""""""""""""""
" Commands                            "
"""""""""""""""""""""""""""""""""""""""

command! -nargs=0 -bar BufOnly silent %bd | silent e# | silent bd#

"""""""""""""""""""""""""""""""""""""""
" broot.vim                           "
"""""""""""""""""""""""""""""""""""""""

let g:broot_replace_netrw = 1
let g:loaded_netrwPlugin = 1
if s:is_mac
    let g:broot_open_command = "open"
endif
if s:is_linux
    let g:broot_open_command = "xdg-open"
endif
let g:broot_vim_conf = [
    \ 'default_flags = "gh"',
    \ 'modal = true',
    \ '',
	\ '[[verbs]]',
    \ 'key = "enter"',
    \ 'execution = ":print_path"',
    \ 'apply_to = "file"',
    \ ]

"""""""""""""""""""""""""""""""""""""""
" lightstl.vim                        "
"""""""""""""""""""""""""""""""""""""""

let g:Itemformatter = function('lightstl#formatters#Item', [' ', ' '])
let g:Listformatter = function('lightstl#formatters#List', [' ', ' ', ' '])

function ReportFileErrors() abort
    let l:paste_mode = &paste == 1 ? 'PASTE' : ''
    if mode() !~# '\v(n|c|v|V)'
        return g:Listformatter([l:paste_mode])
    endif
    let l:ZeroToEmptyString = { number -> number ==# '0' ? '' : number }
    let l:next_mixed_indent = l:ZeroToEmptyString(lightstl#components#fileinfo#NextMixedIndent())
    let l:next_mixed_indent = lightstl#formatters#Item('mixed@', '', l:next_mixed_indent)
    let l:next_trailing_whitespace = l:ZeroToEmptyString(lightstl#components#fileinfo#NextTrailingWhitespace())
    let l:next_trailing_whitespace = lightstl#formatters#Item('trailing@', '', l:next_trailing_whitespace)
    let l:next_conflict = l:ZeroToEmptyString(lightstl#components#fileinfo#NextConflict())
    let l:next_conflict = lightstl#formatters#Item('conflict@', '', l:next_conflict)
    return g:Listformatter([l:next_mixed_indent, l:next_trailing_whitespace, l:next_conflict, l:paste_mode])
endfunction

let s:lightstl_bufno = {    -> lightstl#CreateSection(g:Itemformatter('%n'), '%#StatusLineBufNo#', v:none, '')}
let s:lightstl_mode = {mode -> lightstl#CreateSection(g:Itemformatter(mode), '%#StatusLineMode#', v:none, '')}
let s:lightstl_file = {file -> lightstl#CreateSection(g:Itemformatter(file), '%#StatusLineFile#', v:none, '')}
let s:lightstl_git = {      -> lightstl#CreateSection('%<%0.40{g:Itemformatter(lightstl#components#gitbranch#Get())}', '%#StatusLineInfo#', v:none, '')}
let s:lightstl_div = {      -> lightstl#CreateSection(' %=', '%#StatusLine#', v:none, '')}
let s:lightstl_err = {      -> lightstl#CreateSection('%<%{ReportFileErrors()}', '%#ErrorMsg#', v:none, '')}
let s:lightstl_enc = {      -> lightstl#CreateSection(g:Itemformatter('%{&fileencoding?&fileencoding:&encoding}%y'), '%#StatusLineEnc#', v:none, '')}
let s:lightstl_pos = {      -> lightstl#CreateSection(g:Itemformatter('☰ %l/%L:%c %p%%'), '%#StatusLineInfo#', v:none, '')}

call lightstl#AddMainSection(s:lightstl_bufno())
call lightstl#AddMainSection(s:lightstl_mode('%{lightstl#components#mode#Get()}'))
call lightstl#AddMainSection(s:lightstl_file('%0.40f%m'))
call lightstl#AddMainSection(s:lightstl_git())
call lightstl#AddMainSection(s:lightstl_div())
call lightstl#AddMainSection(s:lightstl_err())
call lightstl#AddMainSection(s:lightstl_enc())
call lightstl#AddMainSection(s:lightstl_pos())

call lightstl#AddHelpSection(s:lightstl_bufno())
call lightstl#AddHelpSection(s:lightstl_mode('HELP'))
call lightstl#AddHelpSection(s:lightstl_file('%0.80f'))
call lightstl#AddHelpSection(s:lightstl_div())
call lightstl#AddHelpSection(s:lightstl_pos())

call lightstl#AddNetrwSection(s:lightstl_bufno())
call lightstl#AddNetrwSection(s:lightstl_mode('NETRW'))
call lightstl#AddNetrwSection(s:lightstl_file('%<%0.40{b:netrw_curdir}'))
call lightstl#AddNetrwSection(s:lightstl_git())
call lightstl#AddNetrwSection(s:lightstl_div())

call lightstl#AddQuickfixSection(s:lightstl_bufno())
call lightstl#AddQuickfixSection(s:lightstl_mode('QUICKFIX'))
call lightstl#AddQuickfixSection(s:lightstl_div())
call lightstl#AddQuickfixSection(s:lightstl_pos())

call lightstl#AddTerminalSection(s:lightstl_bufno())
call lightstl#AddTerminalSection(s:lightstl_mode('TERMINAL'))
call lightstl#AddTerminalSection(s:lightstl_file('%0.80f'))
call lightstl#AddTerminalSection(s:lightstl_div())

call lightstl#Apply()

"""""""""""""""""""""""""""""""""""""""
" vim-clap                            "
"""""""""""""""""""""""""""""""""""""""

" let g:clap_open_preview = 'never'
let g:clap_popup_border = 'nil'
let g:clap_preview_direction = 'UD'
let g:clap_layout = { 'relative': 'editor', 'width': '100%', 'height': '50%', 'row': '05%', 'col': '00%'}
let g:clap_open_action = { 'ctrl-t': 'tab split', 'ctrl-s': 'split', 'ctrl-v': 'vsplit' }
let g:clap_theme = {
            \ 'display': { 'ctermbg': 'NONE', 'ctermfg': 'NONE' },
            \ 'preview': { 'ctermbg': 'Black', },
            \ }
let g:clap_prompt_format = '  %provider_id% '
let g:clap_current_selection_sign = { 'text': '  ', 'texthl': 'ClapCurrentSelectionSign', 'linehl': 'ClapCurrentSelection' }
let g:clap_selected_sign = { 'text': '  ', 'texthl': 'ClapSelectedSign', 'linehl': 'ClapSelected' }

"""""""""""""""""""""""""""""""""""""""
" coc.nvim                            "
"""""""""""""""""""""""""""""""""""""""

let g:coc_global_extensions = [
            \ 'coc-git',
            \ 'coc-snippets', 'coc-highlight', 'coc-lists', 'coc-yank',
            \ 'coc-rust-analyzer',
            \ 'coc-tsserver', 'coc-prettier', 'coc-eslint',
            \ 'coc-json', 'coc-yaml',
            \ 'coc-vetur', 'coc-html', 'coc-css',
            \ 'coc-python',
            \ 'coc-java',
            \ 'coc-texlab',
            \ 'coc-vimlsp', 'coc-sh', 'coc-fish',
            \ ]

set encoding=utf-8
set nobackup
set nowritebackup
set updatetime=300
" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-@> coc#refresh()
" Use <tab> to accept selected suggestion
inoremap <silent><expr> <c-a> pumvisible() ? coc#_select_confirm() : ""
" Use <c-j> to navigate downwards in popup menu
inoremap <expr> <c-j> pumvisible() ? "\<C-n>" : ""
" Use <c-k> to navigate upwards in popup menu
inoremap <expr> <c-k> pumvisible() ? "\<C-p>" : ""
" Use <c-j> to navigate downwards in wildmenu
cnoremap <c-j> <c-n>
" Use <c-k> to navigate upwards in wildmenu
cnoremap <c-k> <c-p>

" Use <c-j> to jump to next snippet gap
let g:coc_snippet_next = '<c-j>'
" Use <c-k> to jump to previous snippet gap
let g:coc_snippet_prev = '<c-k>'

" Use gh show documentation in preview window.
nnoremap <silent> gH :call <SID>show_documentation()<CR>
nnoremap <silent> gh :call CocActionAsync('diagnosticInfo')<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" GoTo code navigation.
nmap <silent> gdd :call CocAction('jumpDefinition')<CR>
nmap <silent> gds :call CocAction('jumpDefinition', 'split')<CR>
nmap <silent> gdv :call CocAction('jumpDefinition', 'vsplit')<CR>
nmap <silent> gdt :call CocAction('jumpDefinition', 'tabedit')<CR>

nmap <silent> gyy :call CocAction('jumpTypeDefinition')<CR>
nmap <silent> gys :call CocAction('jumpTypeDefinition', 'split')<CR>
nmap <silent> gyv :call CocAction('jumpTypeDefinition', 'vsplit')<CR>
nmap <silent> gyt :call CocAction('jumpTypeDefinition', 'tabedit')<CR>

nmap <silent> gii :call CocAction('jumpImplementation')<CR>
nmap <silent> gis :call CocAction('jumpImplementation', 'split')<CR>
nmap <silent> giv :call CocAction('jumpImplementation', 'vsplit')<CR>
nmap <silent> git :call CocAction('jumpImplementation', 'tabedit')<CR>

nmap <silent> gr <Plug>(coc-references)

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)

" Remap <C-d> and <C-u> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-d>"
  nnoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-u>"
  inoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<CR>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<CR>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-d>"
  vnoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-u>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" Add `:OrgImports` command for organize imports of the current buffer.
command! -nargs=0 OrgImports :call CocAction('runCommand', 'editor.action.organizeImport')

" following copied from https://github.com/neoclide/coc.nvim#example-vim-configuration

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end
